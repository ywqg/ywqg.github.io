[{"title":"闭包","date":"2016-07-01T11:33:21.000Z","path":"2016/07/01/闭包/","text":"1.闭包的概念 js中的闭包，指的就是可以访问独立的数据的函数。2使用闭包，要解决的问题 在函数的外部使用，函数内部定义的数据3闭包的基本模型123456789101112function outer()&#123; var str = \"\"; function inner()&#123; return str; &#125; return inner;&#125;var f = outer();var f1 = outer(); 4.如何获取和设置同一个数据 123456789101112131415161718//如何设置和获取同一个数据 使用闭包 function outer()&#123; var sum = 10; return &#123; get: function()&#123; return sum; &#125;, set: function set(value)&#123; sum = value; &#125; &#125;; &#125; var obj = outer(); //利用返回一个对象 5.闭包的原理 上级作用域无法访问下级作用域中的变量 但是下级作用域可以访问上级作用域中变量6闭包的作用： 1.闭包可以用来保护数据 平时如果将数据直接定义在全局，那么将会对数据失去控制权。 使用闭包可以讲数据保护起来，外界想修改数据，必须通过指定的取渠道。这些渠道，就是一些函数，只有通*过这些函数才能对数据进行修改，而且可以在这些函数中增加一些校验逻辑，以保证数据的合理性，以及安全性。 2.就是个函数一个私有的变量 7.注意事项 闭包是不推荐使用的，因为在闭包的函数，在函数调用完成后，不会释放空间，会造成性能问题。 注意： 1.使用对象也可以保护变量。 2.使用闭包也可以保护变量 各种权威资料中，都说闭包存在性能问题。就是因为闭包的内存对象，会常驻内存，在成资源耗损。 闭包也可以使用，但是不能滥用。","tags":[]},{"title":"js中的数组的遍历forEach和map与jquery中的map和each的异同","date":"2016-06-09T08:01:22.000Z","path":"2016/06/09/js中的数组的遍历forEach和map与jquery中的map和each的异同/","text":"1. forEach 和 each方法的异同1.js中的forEach方法语法： 数组.forEach(functiong(v,i,a){ //里面添加需要的逻辑代码 }); 特点： 此方法无返回值 ，并且无法中间跳出循环 2.jquery中的each方法jquery中数组是没有这个方法的，但是jquery提供了一个静态方法，而且可以遍历对象 语法： $.each(arr1,function(i,v){ //jquery中提供的each方法中的回调函数中this 表示当前遍历的对象 //而且可以通过 return false; 跳出循环 }) //而且在返回值 = 传入的对象 代码示例 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;script src=\"../../../2-其他资料/jquery/jquery-3.1.0/jquery-3.1.0.js\"&gt;&lt;/script&gt;&lt;script&gt; // ES5 中给出的方法语法 var arr1 = [ 1, 2, 3, 4 ] var res1 = arr1.forEach( function ( v, i, arr ) &#123; console.log( this ); &#125;); console.log( res1 +\"lll\" ); //无返回值 // 能不能中途跳出循环? 不行 // 在 jq 中数组是没有该方法的, 在 jq 中提供了一个静态方法 // var res2 = $.each( arr1, function ( i, v ) &#123; // console.log( this ); // // return false; // &#125;); // console.log( res2 ); // 在 jq 中提供的 each 方法中的回调函数里 this 表示当前遍历的对象 // jq 中 each 方法还可以遍历对象 var o = &#123; name: 'tom', age: 19, gender: '男' &#125;; var obj = $.each( o, function ( k, v ) &#123; console.log( k + '====' + v ); &#125;); console.log( obj == o ); //返回值即传入值 console.log(obj);&lt;/script&gt;&lt;/html&gt; 2.首先比较js中的 map 和 jquery中的map方法的异同代码示例123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;script src=\"../../../2-其他资料/jquery/jquery-3.1.0/jquery-3.1.0.js\"&gt;&lt;/script&gt;&lt;script&gt; // map 映射 var arr1 = 'abcdefgh'.split( '' ); var res = arr1.map(function ( v, i, arr ) &#123; // console.log( arguments ); // 在数组中提供的 map 方法 必须 返回数据 // 如果不反回 即返回 undefiend &#125;); console.log( res ); // jq 中 var arr2 = [,2,3,4,,5] var res2 = $.map(arr2, function ( v, i ) &#123; //这个是jquery中的静态方法，是构造函数上含有的方法 // return 1; // 在 map 中 this 不再可以被使用, 是 window console.log( this ); return v; //如果返回的是null 或者undefined 不会存储 &#125;); console.log( res2 );&lt;/script&gt;&lt;/html&gt; 3.在jquery中还提供了实例方法 map each方法 jquery对象.map(callback); 回调函数中的参数： callback(index,domElement) 对当前集合中的每个元素调用的函数对象。 jquery对象.each(callback); 回调函数中的参数： function(index,element) 必需。为每个匹配元素规定运行的函数。 index - 选择器的 index 位置 element - 当前的元素（也可使用 &quot;this&quot; 选择器）","tags":[]}]